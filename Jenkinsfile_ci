pipeline {
    agent {
        docker {
            image 'maroki92/maven-jdk21-trivy:latest'
            args '-v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        APP_NAME = 'demo'
        DOCKER_REGISTRY = 'maroki92'
        IMAGE_NAME = "${DOCKER_REGISTRY}/${APP_NAME}"

        MAVEN_OPTS = '-Dmaven.repo.local=/var/jenkins_home/.m2/repository'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    env.BUILD_TAG = "${env.GIT_COMMIT}"
                }
            }
        }

        stage('Test & Build') {
            parallel {
                stage('Unit Tests') {
                    steps {
                        sh 'mvn clean test'
                    }
                    post {
                        always {
                            junit 'target/surefire-reports/*.xml'
                        }
                    }
                }

                stage('Code Quality') {
                    steps {
                        withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                            sh """
                                mvn sonar:sonar \
                                  -Dsonar.projectKey=${APP_NAME} \
                                  -Dsonar.host.url=http://host.docker.internal:9000 \
                                  -Dsonar.login=$SONAR_TOKEN
                            """
                        }
                    }
                }
            }
        }

        stage('Package Application') {
            steps {
                sh 'mvn clean package -DskipTests'
                archiveArtifacts artifacts: 'target/*.jar', allowEmptyArchive: false
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def image = docker.build("${IMAGE_NAME}:${BUILD_TAG}")
                    docker.withRegistry('', 'docker-registry-credentials') {
                        image.push()
                        image.push('latest')
                    }
                }
            }
        }

        stage('Security Scan') {
            steps {
                sh """
                  rm -rf trivy-reports
                  mkdir -p trivy-reports
                  trivy image --format json -o trivy-reports/trivy-report.json ${IMAGE_NAME}:${BUILD_TAG}
                  trivy convert --format template \
                    --template /usr/local/share/trivy/html.tpl \
                    --output trivy-reports/trivy-report.html \
                    trivy-reports/trivy-report.json
                """
            }
            post {
                always {
                    archiveArtifacts artifacts: 'trivy-reports/*', allowEmptyArchive: true
                    publishHTML([
                        reportDir: 'trivy-reports',
                        reportFiles: 'trivy-report.html',
                        reportName: 'Trivy Security Report',
                        keepAll: true,
                        alwaysLinkToLastBuild: true,
                        allowMissing: true
                    ])
                }
            }
        }
    }

    post {
        always {
            sh 'docker system prune -f'
            archiveArtifacts artifacts: 'target/logs/**/*.log', allowEmptyArchive: true
        }
        success {
            echo "✅ CI pipeline réussi pour ${env.BRANCH_NAME}"

            // Déclenche automatiquement le job CD
            build job: 'spring-demo-cd', parameters: [
                string(name: 'BUILD_TAG', value: "${env.BUILD_TAG}"),
                string(name: 'IMAGE_NAME', value: "${env.IMAGE_NAME}")
            ]
        }
        failure {
            echo "❌ CI pipeline échoué"
        }
    }
}